# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, v2-next ]
  pull_request:
    branches: [ master , v2-next]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5 -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -e MYSQL_DATABASE=ots_test

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v4
        with:
          node-version: '^22'
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Runs a single command using the runners shell
      - name: Versions
        run: |
          ruby --version
          bundler --version
          node --version
          yarn --version

      - name: Install dependencies
        run: yarn install

      - name: Run JS tests
        run: |
          NODE_ENV=test yarn test

      - name: Run asset compile
        run: |
          HOST_URL=http://localhost RAILS_ENV=production SECRET_KEY_BASE=dummy SENTRY_DSN=test ./bin/rails assets:precompile

      - name: Run rspec
        run: |
          HOST_URL=http://localhost RAILS_ENV=test MYSQL_USER=root MYSQL_DATABASE="osu_tournament_stats_test" MYSQL_HOST="127.0.0.1" MYSQL_PORT=${{ job.services.mysql.ports[3306] }} SENTRY_DSN=test bundle exec rspec

      - name: Complete
        run: echo "Build complete!"
